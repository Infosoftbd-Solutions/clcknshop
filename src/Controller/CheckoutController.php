<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Cache\Cache;
use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Http\Session;
use Cake\I18n\Date;
use Cake\I18n\FrozenTime;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;
use  Cake\Log\Log;
use phpDocumentor\Reflection\Types\This;


/**
 * Checkout Controller
 *
 *
 * @method \App\Model\Entity\Checkout[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class CheckoutController extends AppController
{

    // Within your controllers
    public function initialize()
    {
        parent::initialize();

    }
    public function beforeRender(Event $event)
    {
        $this->viewBuilder()->setLayout('customer');
        return parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @param array $product
     * @return void
     */

     function gen_uuid() {
         $uuid =  sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
             // 32 bits for "time_low"
             mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

             // 16 bits for "time_mid"
             mt_rand( 0, 0xffff ),

             // 16 bits for "time_hi_and_version",
             // four most significant bits holds version number 4
             mt_rand( 0, 0x0fff ) | 0x4000,

             // 16 bits, 8 bits for "clk_seq_hi_res",
             // 8 bits for "clk_seq_low",
             // two most significant bits holds zero and one for variant DCE1.1
             mt_rand( 0, 0x3fff ) | 0x8000,

             // 48 bits for "node"
             mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
         );
         Log::write('debug', "uuid generated " .  $uuid);
         return $uuid;
   }

   public function onePageCheckout($code = null){
        
        if($this->request->is('ajax')){
            $discount = $this->applyCoupon($code);
            if($discount != 0){
                $checkout = $this->request->getSession()->read('checkout');
                $checkout['order']['discount'] = $discount;
                $this->request->getSession()->write('checkout', $checkout);
            }

            $this->layout="ajax";
            echo $discount;
            die();
        }

        $loginConfig = json_decode(Configure::read('App.login'),true);
        if(!isset($loginConfig))
          $loginConfig['allow_anon_ckt'] = 'on';

        if(!isset($loginConfig) || $loginConfig['one_page_checkout'] != 'on')
           return $this->redirect(['controller' => 'Checkout' , 'action' => 'index']);
        
        $anon_checkout = false;
        if(isset($loginConfig) && isset($loginConfig['allow_anon_ckt']) && $loginConfig['allow_anon_ckt'] == 'on')
            $anon_checkout = true;

        if ( !$this->request->getSession()->read('customer_logged_in') && (!$anon_checkout)){
            return $this->redirect(['controller' => 'Customers' , 'action' => 'login']);
        }

        if ($this->request->is('post')){
            $checkout = $this->request->getSession()->read('checkout');
            

            $data = $this->request->getData();
            if(isset($data['custom-switch-checkbox-password']) && $data['custom-switch-checkbox-password'] == 'on'){
                $data['shipping']['password'] = md5($data['shipping']['password']);
            }
            $checkout['shipping_address'] = $data['shipping'];
            
            $checkout['billing_address'] = (isset($data['custom-switch-checkbox-billing']) && $data['custom-switch-checkbox-billing'] == 'on') ? array() : $data ['billing'];
            $checkout['order']['billing_address'] = (count($checkout['billing_address']) > 0) ? json_encode($checkout['billing_address']) : null;
            
            // Calculate shipping charge
            $ShippingMethods = TableRegistry::getTableLocator()->get('ShippingMethods');

            $shipping_method = $ShippingMethods->get($data['shipping_method']);


            $shipping_fee = $shipping_method->flat_rate ? $shipping_method->price : $shipping_method->price * $checkout['order']['shipping_weight'];
            $checkout['order']['order_total'] = ($checkout['order']['sub_total'] - $checkout['order']['discount']) + $shipping_fee;
            $checkout['order']['shipping_methods_id'] = $data['shipping_method'];
            $checkout['order']['shipping_fee'] = $shipping_fee;



            $PaymentProcessors = TableRegistry::getTableLocator()->get('PaymentProcessor');
            $payment_processor = $PaymentProcessors->find('all')->where(['id' => $data['payment_processor']])->first();

            if(!$payment_processor){
                $this->Flash->error(__('The payment processor does not Exists. Please contact our support center'));
                return $this->redirect($this->referer());
            }
            $className = ucfirst($payment_processor->class);
          $this->loadComponent("{$className}Payment.Payment");

          if($this->Payment->validateCheckout($this->request)){

            $Orders = TableRegistry::getTableLocator()->get('Orders');
            $checkout['order']['order_id'] = $Orders->generateOrderId();
            $checkout['order']['order_password'] = $Orders->generateOneTimePassword();
            $checkout['order']['payment_processor_id'] = $data['payment_processor'];
            // $checkout['order']['sub_total'] = $data['subtotal'];

            if($this->request->getSession()->read('customer_logged_in')){
                $customer = $this->request->getSession()->read('customer');
                $checkout['order']['customers_id'] = $customer->id;
                $checkout['order']['shipping_address'] = json_encode($checkout['shipping_address']);
            }else{
                //            create new customer
                $Customers = TableRegistry::getTableLocator()->get('Customers');
                $customer = $Customers->newEntity();
                $customer = $Customers->patchEntity($customer,$checkout['shipping_address']);
                if ($Customers->save($customer)){
                    $checkout['order']['customers_id'] = $customer['id'];
                    $checkout['order']['shipping_address'] = json_encode($checkout['shipping_address']);
                }
            }

            // $billing_info = null;
            // if (!isset($data['same_address'])) $billing_info = json_encode($data['billing']);
            // $checkout['order']['billing_address'] = $billing_info;
            $checkout['order']['order_date'] = FrozenTime::now();

            $newOrder = $Orders->newEntity();
            $newOrder = $Orders->patchEntity($newOrder,$checkout['order']);
            if ($Orders->save($newOrder)){
                $order_id = $newOrder->id;

                $OrderProducts = TableRegistry::getTableLocator()->get('OrderProducts');
                foreach ($checkout['products'] as $product){
                    $option = null;
                    $options = json_decode($product['option'], true);

                    if ($options){
                        foreach($options as $key=>$value)
                            $option .= $key . "-" . $value . " ";
                    }


                    $data = [
                        'product_variants_id' => $product['vid'],
                        'products_id' => $product['id'],
                        'orders_id' => $order_id,
                        'product_title' => $product['title'],
                        'product_sku' => $product['sku'],
                        'product_options' => $option,
                        'product_price' => $product['price'],
                        'product_weight' => $product['weight'],
                        'product_quantity' => $product['quantity']
                    ];


                    $order_product = $OrderProducts->newEntity();
                    $order_product = $OrderProducts->patchEntity($order_product, $data);
                    if (!$OrderProducts->save($order_product)){
                        $this->Flash->error(__('The order product could not be saved. Please, try again.'));
                        return $this->redirect(['controller' => 'checkout', 'action' => 'index']);
                    }
                }

                $log = $Orders->addOrderLog($order_id,[
                    'status' => 0,
                    'by' => $checkout['shipping_address']['first_name']." ".$checkout['shipping_address']['last_name']
                ]);


                 $store_sessions = ['carts'];
                foreach ($store_sessions as $session){
                    if($this->request->getSession()->check($session))
                        $this->request->getSession()->delete($session);
                }

                $order = $Orders->get($newOrder->id, [
                    "contain" => ['Customers', 'OrderProducts']
                ]);
                $store = json_decode(Configure::read('App.store'));


                $sms_notification = json_decode(Configure::read('App.sms_notification'));
                if(isset($sms_notification->order_placed_from_store_cus_notify) &&
                 $sms_notification->order_placed_from_store_cus_notify == "on" &&
                 isset($order->customer->phone) &&
                 empty($order->customer->phone) == false){
                    $sms = Configure::read('App.sms_con_order_placed');
                    $sms = $this->contentProcess($sms, ['order_id' => $order->order_id]);
                    $sms_res = $this->SMS->send($order->customer->phone, $sms);
                }


                if(isset($sms_notification->order_placed_from_store_admin_notify) &&
                 $sms_notification->order_placed_from_store_admin_notify == "on"){
                    if(isset($store->phone) && empty($store->phone) == false){
                        $sms = "A New Order has been placed. Order ID #%order_id%. Order total %amount%";
                        $sms = $this->contentProcess($sms, ['order_id' => $order->order_id, 'amount' => $order->order_total]);
                        $sms_res = $this->SMS->send($order->customer->phone, $sms);
                    }
                }




                // sned mail
                $mail = json_decode(Configure::read('App.mail_notification'));
                if(isset($mail->order_placed_from_store_cus_notify) &&
                        $mail->order_placed_from_store_cus_notify == "on" &&
                        isset($order->customer->email) &&
                        empty($order->customer->email) == false){
                        $mail_res = $this->Mail->send($order->customer->email, "Your order has been placed order #{$order->order_id}", ['order' => $order, 'store' => $store], 'order_placed');
                }

                if(isset($mail->order_placed_from_store_admin_notify) &&
                 $mail->order_placed_from_store_admin_notify == "on"){
                    if(isset($store->email) && empty($store->email) == false){
                        $mail_res = $this->Mail->send($store->email, "A new order has been placed order #{$order->order_id}", ['order' => $order, 'store' => $store], 'admin_order_placed');
                    }
                }

                if(!$this->Payment->afterCheckout($this->request, $order))
                   return;


                return $this->redirect(['controller' => 'checkout', 'action' => 'thankYou', $order->order_id ]);



            }else{

                $this->Flash->error(__('The order could not be saved. Please, try again.'));
                return $this->redirect(['controller' => 'checkout', 'action' => 'index']);
            }

          }
        }




        $checkout = array();
        $shipping_methods = TableRegistry::getTableLocator()->get('ShippingMethods');
        $PaymentProcessors = TableRegistry::getTableLocator()->get('PaymentProcessor');

        $checkout['shipping_methods'] = $shipping_methods->find('all')->where(['status' => 1])->toArray();
        $checkout['payment_processors']  = $PaymentProcessors->find('all')->where(['status' => 1])->toArray();

        if( $this->request->getSession()->check('shipping_address') )
            $checkout['shipping_address'] = $this->request->getSession()->read('shipping_address');
        else if($this->request->getSession()->check('customer'))
            $checkout['shipping_address'] = $this->request->getSession()->read('customer');
        else     
            $checkout['shipping_address'] = array();
        

        $checkout['billing_address'] = $this->request->getSession()->check('billing_address') ? $this->request->getSession()->read('billing_address') : array();

        if( $this->request->getSession()->check('buyNowCart') && !empty($this->request->getSession()->read('buyNowCart')) )
        {
            $cart = $this->request->getSession()->read('buyNowCart');
            $this->request->getSession()->delete('buyNowCart');
        }
        elseif ($this->request->getSession()->check('carts') && !empty($this->request->getSession()->read('carts')))
        {
            $cart = $this->request->getSession()->read('carts');
        }
        else {
            return $this->redirect(['controller' => 'Frontend', 'action' => 'cart']);
        }
        $checkout['products'] = $this->cartProducts($cart);

        $subtotal = 0;
        $weight = 0;
        foreach($checkout['products'] as $product){
            $subtotal += $product['price'] * $product['quantity'];
            $weight += $product['weight'] * $product['quantity'];
        }
            

        $checkout['order']['sub_total'] = $subtotal;
        $checkout['order']['shipping_weight'] = $weight;
        $checkout['order']['discount'] = 0;
        

        $this->request->getSession()->write('checkout', $checkout);
        $this->set('checkout', $checkout);
   }




    public function index()
    {
        $loginConfig = json_decode(Configure::read('App.login'),true);
        if(!isset($loginConfig))
          $loginConfig['allow_anon_ckt'] = 'on';
        
        if(isset($loginConfig) && isset($loginConfig['one_page_checkout']) && $loginConfig['one_page_checkout'] == 'on')
           return $this->redirect(['controller' => 'Checkout' , 'action' => 'onePageCheckout']);
        
          $anon_checkout = false;
        if(isset($loginConfig) && isset($loginConfig['allow_anon_ckt']) && $loginConfig['allow_anon_ckt'] == 'on')
            $anon_checkout = true;
        

        if ( !$this->request->getSession()->read('customer_logged_in') && (!$anon_checkout)){
            return $this->redirect(['controller' => 'Customers' , 'action' => 'login']);
        }

        $sess_id = $this->request->getQuery('c_sess_id',null);

        $checkout = array();
        if($sess_id == null){
          $this->request->getSession()->delete('checkout');
          $this->request->getSession()->delete('shipping');
          $this->request->getSession()->delete('payment');
          $sess_id = uniqid();
          $checkout['sess_id'] = $sess_id;
        }else{
            if($this->request->getSession()->check('checkout'))
                $checkout = $this->request->getSession()->read('checkout');
            else if($this->request->getSession()->check('shipping'))
                $checkout = $this->request->getSession()->read('shipping');
            else if($this->request->getSession()->check('payment'))
                $checkout = $this->request->getSession()->read('payment');

            if($checkout['sess_id'] != $sess_id){
              $this->request->getSession()->delete('checkout');
              $this->request->getSession()->delete('shipping');
              $this->request->getSession()->delete('payment');
              return  $this->redirect('/checkout');
           }
        }




        if($this->request->is('get') && !isset($checkout['products'])){

            if( $this->request->getSession()->check('buyNowCart') && !empty($this->request->getSession()->read('buyNowCart')) )
            {
                $cart = $this->request->getSession()->read('buyNowCart');
                $this->request->getSession()->delete('buyNowCart');
            }
            elseif ($this->request->getSession()->check('carts') && !empty($this->request->getSession()->read('carts')))
            {
                $cart = $this->request->getSession()->read('carts');
            }
            else {
                return $this->redirect(['controller' => 'Frontend', 'action' => 'cart']);
            }
            $checkout['products'] = $this->cartProducts($cart);
            $subtotal= 0;
            foreach($checkout['products'] as $product)
                $subtotal += $product['price'] * $product['quantity'];
                

            $checkout['order']['subtotal'] = $subtotal;
            $checkout['order']['discount'] = 0;

        }

        if ($this->request->is('post')){

            $checkout['shipping_address'] = $this->request->getData();

            if (!empty($this->request->getData('code'))){
                $discount = $this->applyCoupon($this->request->getData('code'));
                if ($discount > 0 ){
                    $checkout['order']['discount'] = $discount;
                    $checkout['order']['coupon_code'] = $this->request->getData('code');
                    $this->Flash->success("Coupon Applied successfully.");
                } else{
                    $this->Flash->error(__('Sorry, this coupon is not valid. Please check for any typing errors'));
                }
            }
            else{
                $this->request->getSession()->delete('checkout');
                $this->request->getSession()->write('shipping', $checkout);
                $this->request->getSession()->write('backsess', $checkout);
                return $this->redirect(['controller'=>'checkout', 'action'=> 'shipping','?'=>['c_sess_id'=>$checkout['sess_id']]]);

            }
        }

        if (key_exists('shipping_address', $checkout) == false) {
            $checkout['shipping_address'] = $this->request->getSession()->check('customer') ? $this->request->getSession()->read('customer') : [];
        }

        //$this->Flash->success("default flash message");

        $this->request->getSession()->write('checkout', $checkout);
        $this->set('checkout', $checkout);
        $this->render('index');

    }



    function jsredirect($url){
      $url = (is_array($url))?Router::url($url):$url;
      echo "<html><body><script> window.location.href = '{$url}';  </script>   </body></html>";
      exit();
    }




    public function shipping()
    {
       
        $sess_id = $this->request->getQuery('c_sess_id',null);
        $checkout = null;
        if ($this->request->getSession()->check('payment'))
            $checkout = $this->request->getSession()->read('payment');
        else if ($this->request->getSession()->check('shipping'))
            $checkout = $this->request->getSession()->read('shipping');
        else if ($this->request->getSession()->check('backsess'))
            $checkout = $this->request->getSession()->read('backsess');


        if (empty($checkout)){
           // pr($this->request->getSession()->read('payment'));
          //  pr($this->request->getSession()->read('shipping'));
          //  pr($this->request->getSession()->read('backsess'));
          //  die();
            $this->Flash->error("invalid checkout session");
            return $this->redirect(['controller' => 'checkout', 'action'=>'index']);
        }

        if(!$sess_id || $checkout['sess_id'] != $sess_id){
             $this->Flash->error("session id mismatched");
             return $this->redirect(['controller' => 'checkout', 'action'=>'index']);
        }

        $shipping_methods = TableRegistry::getTableLocator()->get('ShippingMethods');


        if ($this->request->is('post')){

            $id = $this->request->getData('shipping_method');
            $weight = $this->request->getData('product_weight');
            $shipping_method = $shipping_methods->get($id);
            $shipping_fee = $shipping_method->flat_rate ? $shipping_method->price : $shipping_method->price * $weight;
            $checkout['order']['order_total'] = ($checkout['order']['subtotal'] - $checkout['order']['discount']) + $shipping_fee;
            $checkout['order']['shipping_methods_id'] = $shipping_method->id;
            $checkout['order']['shipping_fee'] = $shipping_fee;
            $checkout['order']['shipping_weight'] = $weight;
            $this->request->getSession()->delete('shipping');
            $this->request->getSession()->write('payment', $checkout);
            $this->request->getSession()->write('backsess', $checkout);

            //pr($checkout);
            /*$PaymentProcessors = TableRegistry::getTableLocator()->get('PaymentProcessor');
            $payment_processors = $PaymentProcessors->find('all')->where(['status' => 1])->toArray();
            $this->set(compact('checkout', 'payment_processors'));
            $this->render('payment_method');
            return;*/
            return $this->redirect(['controller'=>'checkout', 'action'=> 'payment','?'=>['c_sess_id'=>$checkout['sess_id']]]);

        }


        $shipping_methods = $shipping_methods->find('all')->where(['status' => 1])->toArray();
        $this->set(compact('checkout', 'shipping_methods'));
        $this->render('shipping_method');
    }

    public function payment(){
      $sess_id = $this->request->getQuery('c_sess_id',null); 
      $checkout = null;
      if ($this->request->getSession()->check('payment'))
          $checkout = $this->request->getSession()->read('payment');
      else if ($this->request->getSession()->check('backsess'))
          $checkout = $this->request->getSession()->read('backsess');


      if (empty($checkout)){

        $this->Flash->error("invalid checkout session in payment");
        return $this->redirect(['controller' => 'checkout', 'action'=>'index']);
      }
      if(!$sess_id || $checkout['sess_id'] != $sess_id || !isset($checkout['order']['shipping_methods_id'])){
        $this->Flash->error("session id mismatched");
        return $this->redirect('/checkout');
      }


        if ($this->request->is('post')){

            $PaymentProcessors = TableRegistry::getTableLocator()->get('PaymentProcessor');
            $payment_processor = $PaymentProcessors->find('all')->where(['id' => $this->request->getData('payment_processor')])->first();

            if(!$payment_processor){
                $this->Flash->error(__('The payment processor does not Exists. Please contact our support center'));
                return $this->redirect($this->referer());
            }
            $className = ucfirst($payment_processor->class);
          $this->loadComponent("{$className}Payment.Payment");

          if($this->Payment->validateCheckout($this->request)){
            $Orders = TableRegistry::getTableLocator()->get('Orders');
            $data = $this->request->getData();
            $checkout['order']['order_id'] = $Orders->generateOrderId();
            $checkout['order']['order_password'] = $Orders->generateOneTimePassword();
            $checkout['order']['payment_processor_id'] = $data['payment_processor'];
            $checkout['order']['sub_total'] = $checkout['order']['subtotal'];

            if($this->request->getSession()->read('customer_logged_in')){
                $customer = $this->request->getSession()->read('customer');
                $checkout['order']['customers_id'] = $customer->id;
                $checkout['order']['shipping_address'] = json_encode($checkout['shipping_address']);
            }else{
                //            create new customer
                $Customers = TableRegistry::getTableLocator()->get('Customers');
                $customer = $Customers->newEntity();
                $customer = $Customers->patchEntity($customer,$checkout['shipping_address']);
                if ($Customers->save($customer)){
                    $checkout['order']['customers_id'] = $customer['id'];
                    $checkout['order']['shipping_address'] = json_encode($checkout['shipping_address']);
                }
            }

            $billing_info = null;
            if (!isset($data['same_address'])) $billing_info = json_encode($data['billing']);
            $checkout['order']['billing_address'] = $billing_info;
            $checkout['order']['order_date'] = FrozenTime::now();

            $newOrder = $Orders->newEntity();
            $newOrder = $Orders->patchEntity($newOrder,$checkout['order']);
            if ($Orders->save($newOrder)){
                $order_id = $newOrder->id;

                $OrderProducts = TableRegistry::getTableLocator()->get('OrderProducts');
                foreach ($checkout['products'] as $product){
                    $option = null;
                    $options = json_decode($product['option'], true);

                    if ($options){
                        foreach($options as $key=>$value)
                            $option .= $key . "-" . $value . " ";
                    }


                    $data = [
                        'product_variants_id' => $product['vid'],
                        'products_id' => $product['id'],
                        'orders_id' => $order_id,
                        'product_title' => $product['title'],
                        'product_sku' => $product['sku'],
                        'product_options' => $option,
                        'product_price' => $product['price'],
                        'product_weight' => $product['weight'],
                        'product_quantity' => $product['quantity']
                    ];


                    $order_product = $OrderProducts->newEntity();
                    $order_product = $OrderProducts->patchEntity($order_product, $data);
                    if (!$OrderProducts->save($order_product)){
                        $this->Flash->error(__('The order product could not be saved. Please, try again.'));
                        return $this->redirect(['controller' => 'checkout', 'action' => 'index']);
                    }
                }

                $log = $Orders->addOrderLog($order_id,[
                    'status' => 0,
                    'by' => $checkout['shipping_address']['first_name']." ".$checkout['shipping_address']['last_name']
                ]);

//                remove all of checkout session
                // $store_sessions = ['checkout',  'subtotal', 'carts'];
                 $store_sessions = ['payment', 'carts','backsess'];
                foreach ($store_sessions as $session){
                    if($this->request->getSession()->check($session))
                        $this->request->getSession()->delete($session);
                }

                // $this->Flash->success(__('The order  has been Placed.'));

                //SEND MESSAGE
//                $sms = $this->SMS->send();


                $order = $Orders->get($newOrder->id, [
                    "contain" => ['Customers', 'OrderProducts']
                ]);
                $store = json_decode(Configure::read('App.store'));


                $sms_notification = json_decode(Configure::read('App.sms_notification'));
                if(isset($sms_notification->order_placed_from_store_cus_notify) &&
                 $sms_notification->order_placed_from_store_cus_notify == "on" &&
                 isset($order->customer->phone) &&
                 empty($order->customer->phone) == false){
                    $sms = Configure::read('App.sms_con_order_placed');
                    $sms = $this->contentProcess($sms, ['order_id' => $order->order_id]);
                    $sms_res = $this->SMS->send($order->customer->phone, $sms);
                }


                if(isset($sms_notification->order_placed_from_store_admin_notify) &&
                 $sms_notification->order_placed_from_store_admin_notify == "on"){
                    if(isset($store->phone) && empty($store->phone) == false){
                        $sms = "A New Order has been placed. Order ID #%order_id%. Order total %amount%";
                        $sms = $this->contentProcess($sms, ['order_id' => $order->order_id, 'amount' => $order->order_total]);
                        $sms_res = $this->SMS->send($order->customer->phone, $sms);
                    }
                }




                // sned mail
                $mail = json_decode(Configure::read('App.mail_notification'));
                if(isset($mail->order_placed_from_store_cus_notify) &&
                        $mail->order_placed_from_store_cus_notify == "on" &&
                        isset($order->customer->email) &&
                        empty($order->customer->email) == false){
                        $mail_res = $this->Mail->send($order->customer->email, "Your order has been placed order #{$order->order_id}", ['order' => $order, 'store' => $store], 'order_placed');
                }

                if(isset($mail->order_placed_from_store_admin_notify) &&
                 $mail->order_placed_from_store_admin_notify == "on"){
                    if(isset($store->email) && empty($store->email) == false){
                        $mail_res = $this->Mail->send($store->email, "A new order has been placed order #{$order->order_id}", ['order' => $order, 'store' => $store], 'admin_order_placed');
                    }
                }

                if(!$this->Payment->afterCheckout($this->request, $order))
                   return;


                return $this->redirect(['controller' => 'checkout', 'action' => 'thankYou', $order->order_id ]);



            }else{

                $this->Flash->error(__('The order could not be saved. Please, try again.'));
                return $this->redirect(['controller' => 'checkout', 'action' => 'index']);
            }

          }
        }

        $PaymentProcessors = TableRegistry::getTableLocator()->get('PaymentProcessor');
        $payment_processors = $PaymentProcessors->find('all')->where(['status' => 1])->toArray();
        $this->set(compact('checkout', 'payment_processors'));
        $this->render('payment_method');

    }


    public function cartProducts($carts = array()){
        $products = TableRegistry::getTableLocator()->get('Products');
        $product_variants = TableRegistry::getTableLocator()->get('ProductVariants');
        $cart_products = [];
        //$subtotal = 0;

        foreach ($carts as $cart){
            $item = [];

            if (isset($cart['variant_id']) && $cart['variant_id'] != 0){
                $variant = $product_variants->get($cart['variant_id'],[
                    'contain' => 'Products'
                ]);
                if ($variant){
                    $item['id'] = $variant->product->id;
                    $item['vid'] = $variant->id;
                    $item['title'] = $variant->product->title;
                    $item['option'] = $variant->option_values;
                    $item['sku'] = $variant->sku;
                    $item['price'] = $variant->price;
                    $item['weight'] = $variant->weight;
                    $item['quantity'] = $cart['quantity'];
                    $item['image'] = $variant->product->DefaultImage;
                }
            }
            else{
                $product = $products->get($cart['product_id']);
                if ($product){
                    $item['id'] = $product->id;
                    $item['vid'] = 0;
                    $item['title'] = $product->title;
                    $item['option'] = $product->option_values;
                    $item['sku'] = $product->sku;
                    $item['price'] = $product->price;
                    $item['weight'] = $product->weight;
                    $item['quantity'] = $cart['quantity'];
                    $item['image'] = $product->DefaultImage;
                }
            }
            //$subtotal+= $item['price'] * $item['quantity'];
            $cart_products[] = $item;
        }

        //$this->request->getSession()->write('subtotal', $subtotal);
//        $this->request->getSession()->write('cart_products', $cart_products);
        return $cart_products;
    }


    public function applyCoupon($c_code)
    {
        $Coupon                 = TableRegistry::getTableLocator()->get('Coupons');
        $Collection             = TableRegistry::getTableLocator()->get('Categories');
        $current_date_and_time  = FrozenTime::now();
        $discount               = 0;
        $total_purchase_amount  = 0;
        $coupon_valid_products  = array();
        $is_not_match_product   = true;

        $coupon = $Coupon->find('all')->where(['coupon_code' =>  $c_code])->first();
        
        if ($coupon){

            if ($current_date_and_time < $coupon->start_date ||  $current_date_and_time > $coupon->end_date) return 0;

            if ($coupon->customer_selection_type == 2){
                $logged_in_customer = $this->request->getSession()->read('customer');
                $customers = explode(',', $coupon->customers);

                if (!in_array($logged_in_customer->id, $customers)) return  0;
            }



            if ($coupon->product_selection_type == 2){
                $coupon_valid_products = explode(',', $coupon->products);
            }elseif ($coupon->product_selection_type == 3){
                $collections = explode(',', $coupon->products);

                foreach ($collections as $collection_id){
                    $products = $Collection->collectionProducts($collection_id)->toArray();
                    foreach ($products as $p){
                        $coupon_valid_products[] = $p['id'];
                    }
                }
                $coupon_valid_products = array_unique($coupon_valid_products);
            }


            $cartProducts = $this->cartProducts($this->request->getSession()->read('carts'));
            
            foreach ($cartProducts as $product){
                $total_purchase_amount += $product['price'] * $product['quantity'];
                
                if (in_array($product['id'], $coupon_valid_products) || $coupon->product_selection_type == 1){
                    $is_not_match_product = false;
                    //    percentage
                    if ($coupon->discount_type){
                        $discount += floor(($product['price'] * $product['quantity']) * ($coupon->discount_amount / 100));
                    }else{
                        $discount += $coupon->discount_amount * $product['quantity'];
                    }
                    
                }
            }

            

            if (($is_not_match_product == true) ||  ((int)$coupon->min_purchase_amount > (int) $total_purchase_amount )) return  0;

            
            if ( (int) $coupon->max_amount !== 0 && $discount > (int) $coupon->max_amount)
                $discount = $coupon->max_amount;
                
        }

        return $discount;
    }



    /**
     * View method
     *
     * @param string|null $id Checkout id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $checkout = $this->Checkout->get($id, [
            'contain' => [],
        ]);

        $this->set('checkout', $checkout);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $checkout = $this->Checkout->newEntity();
        if ($this->request->is('post')) {
            $checkout = $this->Checkout->patchEntity($checkout, $this->request->getData());
            if ($this->Checkout->save($checkout)) {
                $this->Flash->success(__('The checkout has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The checkout could not be saved. Please, try again.'));
        }
        $this->set(compact('checkout'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Checkout id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $checkout = $this->Checkout->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $checkout = $this->Checkout->patchEntity($checkout, $this->request->getData());
            if ($this->Checkout->save($checkout)) {
                $this->Flash->success(__('The checkout has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The checkout could not be saved. Please, try again.'));
        }
        $this->set(compact('checkout'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Checkout id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $checkout = $this->Checkout->get($id);
        if ($this->Checkout->delete($checkout)) {
            $this->Flash->success(__('The checkout has been deleted.'));
        } else {
            $this->Flash->error(__('The checkout could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }


    public function trackOrder($order_id = null, $order_password =null)
    {
        if (isset($_GET['order_id']) && !empty($_GET['order_id'])) $order_id = $_GET['order_id'];
        if (isset($_GET['order_password']) && !empty($_GET['order_password'])) $order_password = $_GET['order_password'];

        if ($order_id == null ||  $order_password == null) {
            $this->render('track_order_form');
            return;
        }

        $Orders = TableRegistry::getTableLocator()->get('Orders');
        $order  = $Orders->find('all')->where(['order_id' => $order_id, 'order_password' => $order_password])->contain([
            'Customers','OrderProducts', 'PaymentProcessor', 'ShippingMethods',
            'OrderLogs' => [
                'sort' => ['OrderLogs.id' => 'DESC']
            ]
        ])->first();

        if (!$order){
            $this->Flash->error("Sorry Order not found, please check order ID and password");
            return $this->redirect(Router::url("track-order",true));
        }
        $this->set('order',$order);
    }



    public function thankYou($order_id){
        $order_id = (int) $order_id;
        $Orders = TableRegistry::getTableLocator()->get('Orders');
        $order = $Orders->find('all')->where(['order_id' => $order_id])->first();

        if (!$order) {
            return $this->redirect(['controller' => 'checkout', 'action' => 'cart']);
        }

        $this->set('order_id', $order_id);

    }


    private function generateRandomString($length = 12) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }


    private function checkReferer($action){
        $referer_url = $this->referer('/', true);
        $referer = Router::parse($referer_url);

        if ($referer['controller'] != 'Checkout' && $referer['action'] != $action)
            return $this->redirect(['controller' => 'frontend', 'action' => 'cart']);
    }


    private function contentProcess($content, $data = array()){
        $amount = array_key_exists("amount", $data) ? $data['amount'] : 0;
        $amount = Configure::read('App.currency') . (string) number_format($amount, 2);

        $keywords = [
            '%order_id%'    => array_key_exists("order_id", $data) ? $data['order_id'] : 0000,
            '%store_name%'  => Configure::read('App.store_title'),
            '%amount%'      => $amount
        ];


        foreach ($keywords as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        return $content;
    }



}
