const defaults = { value: 0, stars: 5, half: !1, emptyStar: "far fa-star", halfStar: "fas fa-star-half-alt", filledStar: "fas fa-star", color: "#fcd703", readonly: !1, click: function (t) { /*console.log("No click callback provided!") */ } }; jQuery.fn.extend({ rating: function (t = {}) { return this.each(function () { $(this).attr("rating") && $(this).empty(); let a = {}, s = /^data-rating\-(.+)$/; $.each($(this).get(0).attributes, function (t, e) { if (s.test(e.nodeName)) { let t = e.nodeName.match(s)[1]; a[t] = e.nodeValue } }), t.value = a.value ? a.value : t.value, t.readonly = a.readonly ? a.readonly : t.readonly, this.stars = t.value ? t.value : defaults.value, this.readonly = t.readonly ? t.readonly : defaults.readonly, this.getStars = function () { return $(this).find($("i")) }, $(this).css({ color: t.color ? t.color : defaults.color }).attr("rating", !0), this.readonly || ($(this).off("mousemove").on("mousemove", function (a) { let s = t.half ? t.half : defaults.half; if (this.getStars().index(a.target) >= 0) if (s) { $(this).find("i").attr("class", t.emptyStar ? t.emptyStar : defaults.emptyStar); let s = .5; $(this).find("i").css({ width: $(this).find("i").outerWidth() }), a.offsetX > $(a.target).outerWidth() / 2 && (s = 1); let e = this.getStars().index(a.target) + s; for (let a = 0; a < this.getStars().length; a++)a + .5 < e ? $(this.getStars()[a]).attr("class", t.filledStar ? t.filledStar : defaults.filledStar) : a < e && $(this.getStars()[a]).attr("class", t.halfStar ? t.halfStar : defaults.halfStar) } else { $(this).find("i").attr("class", t.emptyStar ? t.emptyStar : defaults.emptyStar); let s = this.getStars().index(a.target) + 1; for (let a = 0; a < this.getStars().length; a++)a < s && $(this.getStars()[a]).attr("class", t.filledStar ? t.filledStar : defaults.filledStar) } }), $(this).off("mouseout").on("mouseout", function (t) { this.printStars() }), $(this).off("click").on("click", function (a) { if (t.half ? t.half : defaults.half) { let t = .5; a.offsetX > $(a.target).outerWidth() / 2 && (t = 1), this.stars = this.getStars().index(a.target) + t } else this.stars = this.getStars().index(a.target) + 1; (t.click ? t.click : defaults.click)({ stars: this.stars, event: a }) })); const e = t.stars ? t.stars : defaults.stars; for (let a = 0; a < e; a++) { let s = $("<i></i>").addClass(t.emptyStar ? t.emptyStar : defaults.emptyStar).appendTo($(this)); if (this.readonly || s.css({ cursor: "pointer" }), a > 1e3) return } if (this.printStars = function () { if (t.half ? t.half : defaults.half) { $(this).find("i").attr("class", t.emptyStar ? t.emptyStar : defaults.emptyStar); for (let a = 0; a < this.stars; a++)a < this.stars - .5 ? $(this.getStars()[a]).attr("class", t.filledStar ? t.filledStar : defaults.filledStar) : $(this.getStars()[a]).attr("class", t.halfStar ? t.halfStar : defaults.halfStar) } else { $(this).find("i").attr("class", t.emptyStar ? t.emptyStar : defaults.emptyStar); for (let a = 0; a < this.stars; a++)$(this.getStars()[a]).attr("class", t.filledStar ? t.filledStar : defaults.filledStar) } }, this.stars > 0) { this.printStars(), (t.click ? t.click : defaults.click)({ stars: this.stars }) } }) } }), $(function () { $("[data-rating-stars]").each(function () { let t = {}, a = /^data-rating\-(.+)$/; $.each($(this).get(0).attributes, function (s, e) { if (a.test(e.nodeName)) { let s = e.nodeName.match(a)[1]; t[s] = e.nodeValue } }), null != t.input && (t.click = function (a) { $(t.input).val(a.stars) }), $(this).rating(t) }) });